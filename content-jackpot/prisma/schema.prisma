// Content Jackpot Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CampaignType {
  UGC
  PROMOTIONAL
  EDUCATIONAL
}

enum Currency {
  USD
  EUR
  GBP
}

enum StripType {
  FULL
  PARTIAL
  PROGRESSIVE
}

enum JackpotStatus {
  DRAFT
  ACTIVE
  VOTING
  EXTENDED
  COMPLETED
}

enum Platform {
  TIKTOK
  INSTAGRAM
  YOUTUBE
  TWITTER
}

enum VoteType {
  EXTEND
  END
}

model Jackpot {
  id                      String        @id @default(cuid())
  contentRewardsCampaignUrl String
  creatorId               String
  campaignName            String
  type                    CampaignType
  category                String
  thumbnailUrl            String
  jackpotBudget           Float
  currency                Currency
  rewardRate              Float         // base $ per 1000 views from CR
  minimumPayout           Float
  maximumPayout           Float
  flatFeeBonus            Float?
  dangerZoneEnabled       Boolean       @default(false)
  stripPercentage         Float         @default(25) // bottom 25% lose earnings
  stripType               StripType     @default(PARTIAL)
  prizeDistribution       Json          // {1st: 60, 2nd: 30, 3rd: 10}
  winnersCount            Int           @default(3)
  status                  JackpotStatus @default(DRAFT)
  startDate               DateTime
  endDate                 DateTime
  extensionsUsed          Int           @default(0)
  maxExtensions           Int           @default(3)
  platforms               Json          // {tiktok: true, instagram: true, youtube: true, twitter: true}
  contentRequirements     String
  availableContent        String        // Google Drive link
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  // Relations
  submissions             Submission[]
  extensionVotes          ExtensionVote[]

  @@map("jackpots")
}

model Submission {
  id                String   @id @default(cuid())
  jackpotId         String
  userId            String
  userName          String
  contentUrl        String
  platform          Platform
  viewsCount        Int      @default(0)
  lastUpdated       DateTime @default(now())
  rank              Int?
  inDangerZone      Boolean  @default(false)
  baseEarnings      Float    @default(0) // from CR rate
  potentialJackpot  Float    @default(0)
  strippedAmount    Float    @default(0) // if in danger zone
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  jackpot           Jackpot  @relation(fields: [jackpotId], references: [id], onDelete: Cascade)

  @@unique([jackpotId, userId])
  @@map("submissions")
}

model ExtensionVote {
  id        String   @id @default(cuid())
  jackpotId String
  userId    String
  vote      VoteType
  timestamp DateTime @default(now())

  // Relations
  jackpot   Jackpot  @relation(fields: [jackpotId], references: [id], onDelete: Cascade)

  @@unique([jackpotId, userId])
  @@map("extension_votes")
}
